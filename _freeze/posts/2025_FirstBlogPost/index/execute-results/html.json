{
  "hash": "95ef9996e1262dadadf83f62dbbb6e0d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualización de relaciones bivariadas\"\ndescription: \"Análisis gráfico a través de scatterplots, o gráficos de dispersión elaborados mediante ggplot2 en R\"\nauthor:\n  - name: Pedro I. Rosas-Medina\n    url: {}\ndate: \"2025-01-15\"\ncategories: [\"R\", \"ggplot2\", \"tidyverse\"]\nimage: banner.png\nformat:\n  html:\n    toc: TRUE\nengine: knitr\n---\n\n\n\n\n\nEn las ciencias sociales, frecuentemente nos interesamos en interrogantes que implican explorar relaciones entre variables. Una forma usual y efectiva de entender la manera en que dos variables se relacionan, es a través de la visualización de gráficos. Sin embargo, la forma estética que estos adquieren, depende en la distinción e identificación de qué clase de variables se encuentran en nuestra relación de interés.\n\nAl examinar relaciones bivariadas entre dos variables categóricas, una aproximación común y efectiva es el uso de gráficos de barras apilados, agrupados, o segmentados. Con estos, el análisis permite comparar frecuencias o proporciones entre las categorías que conforman cada variable (por ejemplo, la frecuencia de mujeres u hombres dentro de una muestra; o el nivel educativo de las personas que la componen). Por otro lado, cuando las variables involucradas son de corte cuantitativo o numérico, los gráficos de dispersión -o _scatterplots_, son la opción más adecuada, pues facilitan visualizar correlaciones, o patrones de asociación entre las dos variables de interés, permitiendo identificar tendencias, relaciones lineales o no lineales, así como la presencia de posibles valores atípicos.\n\nA pesar de que los gráficos de dispersión suelen ser sencillos de interpretar, es muy usual encontrar ejemplos muy poco claros, con exceso de elementos visuales, desdén por el contexto de los propios datos, uso inadecuado de colores, o inconsistencias como la combinación de datos que no tienen una relación coherente o comparable.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\nEn este blog ahondaré, paso por paso, cómo construir gráficos de dispersión adecuados utilizando `ggplot2`, una paquetería en `R` que forma parte del ecosistema `tidyverse` diseñada para crear visualizaciones de datos de forma flexible, intuitiva, y estéticamente atractiva. Para estos ejemplos, usaremos la base de datos de **Gapminder Foundation**, `gapminder`, que incluye estadísticas históricas sobre desarrollo humano a nivel global, y que es altamente utilizada para el análisis y visualización de información. Para ello, utilicemos:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- gapminder::gapminder %>%\n  mutate(gdpPercap = log10(gdpPercap))\n\nhead(gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n```\n\n\n:::\n:::\n\n\n\nComo podemos ver, esta es una base de datos tipo panel, con seis variables: `country`, `continent`, `year`, `lifeExp`, `pop`, y `gdpPercap`. Para estos ejemplos, nos concentraremos en las variables `lifeExp`, y `gdpPercap`, que miden la expectativa de vida (en años), y el PIB per cápita de los países del mundo (en escala logarítmica), respectivamente.\n\n## Gráficos de dispersión simples\n\nCrear un gráfico de dispersión simple con `ggplot` requiere tres componentes: \n\n1. `data %>%`: el marco de datos seguido del operador `%>%`, o pipe, que _pasa_ directamente la base de datos como entrada a `ggplot()`.\n2. `ggplot()`: que inicia la construcción del gráfico. Dentro de los paréntesis definiremos la estética del gráfico a través de `aes()`, es decir, cómo se asignarán:\n  + `x = gdpPercap`,\n  + `y = lifeExp`,\n    - Es decir, las variables en los ejes `X` y `Y`, respectivamente.\n3. `geom_point()`: que añadirá los puntos al gráfico, donde cada punto representará una observación (en este caso, un país-año). Sin esta función, únicamente podríamos observar un plano, sin ningún elemento estético dentro.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>%\n  ggplot(aes(x = gdpPercap,\n             y = lifeExp)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/scatterplot-simple1-1.png){width=672}\n:::\n:::\n\n\n\nSin embargo, este ejemplo nos permite ver algunos errores comunes. En primer lugar, es notorio el severo _overplotting_ de los puntos, o el uso de etiquetas de ejes asignadas por _default_ según el nombre de las variables graficadas. Además, la visualización carece de un título y/o subtítulo que explique el propósito del gráfico, y la información encontrada no dice mucho más.\n\nAhora, veamos cómo cambia al momento de añadir algunas especificaciones adicionales al código inicial:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>%\n  ggplot(aes(x = gdpPercap,\n             y = lifeExp)) +\n  geom_point(colour = \"dodgerblue\",\n             size = 1.5,\n             alpha = 0.8) +\n  ggtitle(\"Visualización de relaciones bivariadas\",\n          subtitle = \"PIB per cápita vs. Expectativa de vida\") +\n  labs(x = \"PIB per cápita\",\n       y = \"Expectativa de vida\",\n       caption = \"Fuente: elaboración propia con base en datos de gapminder.\") +\n  theme_apa() +\n  theme(plot.title = element_text(face = \"bold\",\n                                  colour = \"black\",\n                                  size = 12),\n        plot.subtitle = element_text(colour = \"black\",\n                                     size = 12),\n        plot.caption = element_text(hjust = 0),\n        axis.title = element_text(colour = \"black\",\n                                  size = 10),\n        axis.text = element_text(colour = \"black\",\n                                 size = 8))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/scatterplot-simple2-1.png){width=672}\n:::\n:::\n\n\n\nEste nuevo código añadió lo siguiente:\n\n1. Ajuste del color\n  * Dentro de la función `geom_point()`, especificamos que el color de los puntos sería igual a `dodgerblue`, su tamaño sería de `1.5` puntos, y añadimos transparencia igual a `0.8`, con el objetivo de reducir manchas, y distinguir más observaciones.\n2. Información descriptiva:\n  * A través de la función `ggtitle()` indicamos el título, y subtítulo, entre comillas, para nuestro gráfico.\n  * La función `labs()` permitió especificar las etiquetas de los ejes `X` y `Y`, de tal forma que ahora, estas sustituyen los nombres de las variables.\n    + Adicionalmente, la especificación `caption = `, da la posibilidad de añadir texto adicional al pie del gráfico. Esto es muy útil al momento de colocar, por ejemplo, la fuente de la información, o una nota aclaratoria.\n3. Selección de un tema:\n  * La función `theme_classic()` añadió una personalización de apariencia al gráfico.\n    + Los temas en `ggplot2` sirven para controlar elementos como colores de fondo, tamaños, y estilos de texto, líneas, cuadrículas y posiciones de leyendas. Esto da la posibilidad de mejorar la estética, y adaptarla a contextos específicos, garantizando que el diseño sea claro y profesional.\n4. Control adicional de elementos distintos a los datos:\n  * Mediante la función `theme()`, añadimos controles adicionales al título (`plot.title = `), subtítulo (`plot.subtitle = `), fuente (`plot.caption =`), etiquetas de ejes (`axis.title = `), y texto de los ejes (`axis.text = `) del gráfico.\n\n## Gráficos de dispersión agrupados\n\nEstos gráficos pueden ser considerados oportunos y efectivos en algunos contextos. Sin embargo, en diferentes situaciones podríamos considerar añadir niveles adicionales de análisis y profundidad a través de gráficos de dispersión agupados, donde el verdadero asunto ya no es únicamente observar la relación entre una variable cuantitativa _A_ y otra del mismo tipo _B_, sino contrastar ambas frente a una variable categórica. Los _scatterplots_ agrupados tienen diferentes razones de ser:\n\n1. **Comparación entre categorías**: permiten observar diferencias o patrones específicos en subgrupos como el género, regiones geográficas, o categorías socioeconómicas.\n2. **Identificación de patrones ocultos**: con estos es posible detectar tendencias o relaciones que un gráfico simple podría ocultar debido a la agregación.\n3. **Mayor riqueza interpretativa**: incluir agrupaciones mejora el contexto y facilita conclusiones más detalladas.\n4. **Facilidad para resaltar diferencias**: permiten identificar visualmente subgrupos que se desvían del patrón general, algo clave para detectar sesgos, excepciones o grupos destacados.\n5. **Comunicación clara**: en análisis y presentaciones, es más intuitivo y efectivo mostrar cómo se comportan los datos dentro de categorías relevantes, en lugar de asumir que un solo gráfico puede explicarlo todo.\n\n### Agrupación por color\n\nUna forma sencilla y eficaz de visualizar el agrupamiento de datos por categorías, es a través de la especificación de colores. En nuestro ejemplo, cada uno de los países se agrupa según el continente de ubicación. En este sentido, podría ser de interés visualizar de forma clara, cada uno de los puntos del gráfico según esta categoría de agrupamiento.\n\n`ggplot` nos brinda esta oportunidad. Para ello, lo que realizamos es muy intuitivo: retomar nuestro código generado, y dentro de la función `aes()`, dentro también de `ggplot()`, especificamos que el color de los puntos en el gráfico, deberá asignarse según la variable `continent`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>%\n  ggplot(aes(x = gdpPercap,\n             y = lifeExp,\n             colour = continent)) +\n  geom_point(size = 1.5,\n             alpha = 0.5) +\n  ggtitle(\"Visualización de relaciones bivariadas\",\n          subtitle = \"PIB per cápita vs. Expectativa de vida\") +\n  labs(x = \"PIB per cápita\",\n       y = \"Expectativa de vida\",\n       caption = \"Fuente: elaboración propia con base en datos de gapminder.\") +\n  theme_apa(legend.pos = \"bottom\") +\n  theme(plot.title = element_text(face = \"bold\",\n                                  colour = \"black\",\n                                  size = 12),\n        plot.subtitle = element_text(colour = \"black\",\n                                     size = 12),\n        plot.caption = element_text(hjust = 0),\n        axis.title = element_text(colour = \"black\",\n                                  size = 10),\n        axis.text = element_text(colour = \"black\",\n                                 size = 8))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/scatterplot-grouped1-1.png){width=672}\n:::\n:::\n\n\n\nPor _default_, `ggplot` utiliza una paleta de colores basados en la función `scale_colour_brewer()`, con la paleta `\"Set1\"`, que es parte de la familia `RColorBrewer`. Esta paleta se diseña para asegurar que los colores sean fácilmente distinguibles entre sí.\n\n¿Pero puedo especificar mis propios colores? ¡Claro! Sin embargo, antes de ello, es importante considerar:\n\n1. **Contraste adecuado**: es importante asegurar que los colores sean lo suficientemente distintos para diferenciar categorías y evitar combinaciones problemáticas para personas con alguna discapacidad visual.\n2. **Consistencia y simplicidad**: se recomienda usar paletas limitadas y coherentes en varios gráficos para evitar sobrecargar la visualización y facilitar la comparación.\n3. **Accesibilidad y legibilidad**: es crucial verificar que los colores no dificulten la lectura de etiquetas o textos, y tengan un buen contraste de fondo.\n4. **Objetivo del gráfico**: elige colores que resalten categorías de interés o sigan el objetivo de la visualización (comparación, descubrimiento, etc.).\n5. **Número de categorías**: si hay muchas categorías, considera otras formas de distinción como facetas o diferentes formas, además de colores.\n\nDicho esto, podemos cambiar o personalizar qué colores se asignan a cada continente, utilizando la función `scale_color_manual()` para establecer los colores en cada nivel de la variable `continent`. Por ejemplo:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>%\n  ggplot(aes(x = gdpPercap,\n             y = lifeExp,\n             colour = continent)) +\n  geom_point(size = 1.5,\n             alpha = 0.5) +\n  scale_color_manual(values = c(\"Africa\" = \"red\", \n                                \"Asia\" = \"blue\", \n                                \"Europe\" = \"green\", \n                                \"Oceania\" = \"purple\", \n                                \"Americas\" = \"orange\")) +\n  ggtitle(\"Visualización de relaciones bivariadas\",\n          subtitle = \"PIB per cápita vs. Expectativa de vida\") +\n  labs(x = \"PIB per cápita\",\n       y = \"Expectativa de vida\",\n       caption = \"Fuente: elaboración propia con base en datos de gapminder.\") +\n  theme_apa(legend.pos = \"bottom\") +\n  theme(plot.title = element_text(face = \"bold\",\n                                  colour = \"black\",\n                                  size = 12),\n        plot.subtitle = element_text(colour = \"black\",\n                                     size = 12),\n        plot.caption = element_text(hjust = 0),\n        axis.title = element_text(colour = \"black\",\n                                  size = 10),\n        axis.text = element_text(colour = \"black\",\n                                 size = 8))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/scatterplot-grouped3-1.png){width=672}\n:::\n:::\n\n\n\n### Agrupación por forma\n\nEn algunos otros contextos, puede ser útil emplear una visualización agrupada donde cada categoría se visualice y diferencie en función de la forma de los puntos, y no el color. A pesar de que la lógica es muy similar a la anterior, en estos casos la elección suele radicar en formas de ayuda para evitar la dependencia del color, o simplificación del diseño gráfico (por ejemplo, para publicaciones donde se pide utilizar escalas de color gris).\n\n¿Cómo hacemos esto en `R` y a través de `ggplot`?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>%\n  ggplot(aes(x = gdpPercap,\n             y = lifeExp,\n             shape = continent)) +\n  geom_point(size = 1.5,\n             alpha = 0.5) +\n  ggtitle(\"Visualización de relaciones bivariadas\",\n          subtitle = \"PIB per cápita vs. Expectativa de vida\") +\n  labs(x = \"PIB per cápita\",\n       y = \"Expectativa de vida\",\n       caption = \"Fuente: elaboración propia con base en datos de gapminder.\") +\n  theme_apa(legend.pos = \"bottom\") +\n  theme(plot.title = element_text(face = \"bold\",\n                                  colour = \"black\",\n                                  size = 12),\n        plot.subtitle = element_text(colour = \"black\",\n                                     size = 12),\n        plot.caption = element_text(hjust = 0),\n        axis.title = element_text(colour = \"black\",\n                                  size = 10),\n        axis.text = element_text(colour = \"black\",\n                                 size = 8))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/scatterplot-grouped2-1.png){width=672}\n:::\n:::\n\n\n\nEl ejemplo, no obstante, hace visible uno de los problemas con este caso. A pesar de que podemos ver algunas formas, como puntos redondos, triángulos, cuadrados, cruces, etc., es evidente que la cantidad de puntos con los que contamos es tal que se vuelve prácticamente inviable distinguir agrupaciones.\n\nAhora vamos con las facetas o paneles. Cada grupo va a un panel distinto. Esto permite una comparación más adecuada cuando tenemos un gran _overlapping_ de puntos.\n\n### ¿Superposición de puntos y grupos? ¡Paneles!\n\nEn diferentes contextos la distinción de grupos no es suficiente o efectiva bajo la asignación de colores o formas a los puntos. En estos escenarios puede ser frustrante _jugar_ con la transparencia, colores, o formas. ¿Qué hacemos entonces?\n\nUna solución a esto puede ser la generación de paneles, dividiendo la visualización en subgráficos, lo cual facilita la legibilidad sin sobrecargar un único gráfico. ¿Pero cómo le hacemos? En `ggplot` esto puede realizarse con la función `facet_wrap()`, o `facet_grid()`, aunque esta última no la tocaremos en este blog.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>%\n  ggplot(aes(x = gdpPercap,\n             y = lifeExp,\n             colour = continent)) +\n  geom_point(size = 1.5,\n             alpha = 0.5) +\n  facet_wrap(~ continent) +\n  ggtitle(\"Visualización de relaciones bivariadas\",\n          subtitle = \"PIB per cápita vs. Expectativa de vida\") +\n  labs(x = \"PIB per cápita\",\n       y = \"Expectativa de vida\",\n       caption = \"Fuente: elaboración propia con base en datos de gapminder.\") +\n  theme_apa(legend.pos = \"bottom\") +\n  theme(plot.title = element_text(face = \"bold\",\n                                  colour = \"black\",\n                                  size = 12),\n        plot.subtitle = element_text(colour = \"black\",\n                                     size = 12),\n        plot.caption = element_text(hjust = 0),\n        axis.title = element_text(colour = \"black\",\n                                  size = 10),\n        axis.text = element_text(colour = \"black\",\n                                 size = 8))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/scatterplot-panels1-1.png){width=672}\n:::\n:::\n\n\n\nCuando se desea generar un gráfico de dispersión agrupado por una variable (`continent` para este caso), el uso de `facet_wrap()` es efectivo. Nuestro ejemplo generó cinco paneles, uno para cada continente dentro de la muestra. Pero, ¿qué es importante considerar antes de generar esta solución?\n\n* **Número de paneles**: si tenemos demasiados grupos, el gráfico se vuelve difícil de leer. En este caso, es importante considerar la cantidad de categorías, o hacer una muestra representativa de los datos.\n* **Etiquetas y títulos**: es importante asegurar que cada panel esté adecuadamente etiquetado, para que sea fácil para el lector, identificar a qué grupo corresponde cada uno.\n\n### ¡Extra, extra! `gghighlight()`\n\n`gghighlight` es una herramienta muy valiosa para mejorar la accesibilidad, claridad y efectividad de los gráficos. Esta paquetería, ayuda a simplificar la visualización de datos complejos y permite resaltar patrones o subgrupos de interés de forma clara y atractiva, lo que facilita a los lectores comprender rápidamente la información que se desea transmitir.\n\n¿Pero qué resaltamos? Siguiendo los ejemplos hasta aquí generados, un posible primer uso de la función `gghighlight()` podría ser para resaltar, específicamente, los puntos (países) que correspondan al continente europeo.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Instalar el paquete gghighlight si no lo tienes\n# install.packages(\"gghighlight\")\n\nlibrary(gghighlight)\n\ndata %>%\n  ggplot(aes(x = gdpPercap, y = lifeExp)) +\n  geom_point(colour = \"dodgerblue\",\n             size = 1.5,\n             alpha = 0.5) +\n  gghighlight(continent == \"Europe\") +\n  ggtitle(\"Visualización de relaciones bivariadas\",\n          subtitle = \"PIB per cápita vs. Expectativa de vida\") +\n  labs(x = \"PIB per cápita\", \n       y = \"Expectativa de vida\", \n       caption = \"Fuente: elaboración propia con base en datos de gapminder.\") +\n  theme_apa(legend.pos = \"bottom\") +\n  theme(plot.title = element_text(face = \"bold\", colour = \"black\", size = 12),\n        plot.subtitle = element_text(colour = \"black\", size = 12),\n        plot.caption = element_text(hjust = 0),\n        axis.title = element_text(colour = \"black\", size = 10),\n        axis.text = element_text(colour = \"black\", size = 8))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\nPero, ¿por qué no contar con lo mejor de ambos mundos? Es decir, ¿podríamos combinar `gghighlight()` y `facet_wrap()`? ¡Claro que sí! ¿Cómo?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>%\n  ggplot(aes(x = gdpPercap, y = lifeExp, colour = continent)) +\n  geom_point(size = 1.5,\n             alpha = 0.5) +\n  gghighlight() +\n  facet_wrap(vars(continent)) +\n  ggtitle(\"Visualización de relaciones bivariadas\",\n          subtitle = \"PIB per cápita vs. Expectativa de vida\") +\n  labs(x = \"PIB per cápita\", \n       y = \"Expectativa de vida\", \n       caption = \"Fuente: elaboración propia con base en datos de gapminder.\") +\n  theme_apa(legend.pos = \"bottom\") +\n  theme(plot.title = element_text(face = \"bold\", colour = \"black\", size = 12),\n        plot.subtitle = element_text(colour = \"black\", size = 12),\n        plot.caption = element_text(hjust = 0),\n        axis.title = element_text(colour = \"black\", size = 10),\n        axis.text = element_text(colour = \"black\", size = 8))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\nVeamos que, en este caso, contamos con la misma cantidad de paneles que en nuestro ejemplo sobre `facet_wrap()`, pero ahora, en cada uno de estos no únicamente extraemos los puntos que coinciden con la categoría particular; sino que además, también vemos todos los puntos contenidos en el gráfico conjunto, resaltando simplemente aquellos que _caen_ en cada grupo.\n\n## Recapitulando...\n\nLa visualización de relaciones bivariadas a través de gráficos de dispersión es una herramienta poderosa para explorar y entender datos, pero su efectividad depende en gran medida de cómo se presenten y ajusten los elementos visuales. En este post, hemos recorrido cómo un gráfico de dispersión simple puede convertirse en una visualización clara y significativa, mediante la adición de elementos como colores, tamaños y etiquetas bien pensadas. El uso de `ggplot2` en `R` permite no solo hacer estos ajustes de forma sencilla, sino también ofrecer un control total sobre los detalles del gráfico, lo cual es crucial para asegurar que la historia que queremos contar con nuestros datos se entienda con claridad. Así, la próxima vez que enfrentes un conjunto de datos con relaciones bivariadas, recuerda que un buen gráfico no solo debe ser atractivo, sino también informativo y contextualizado. ¡La clave está en los detalles!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}